{"ast":null,"code":"'use strict';\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar createIteratorConstructor = require('../internals/create-iterator-constructor');\n\nvar isObject = require('../internals/is-object');\n\nvar defineProperties = require('../internals/object-define-properties');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar INCORRECT_RANGE = 'Incorrect Number.range arguments';\nvar RANGE_ITERATOR = 'RangeIterator';\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(RANGE_ITERATOR);\nvar $RangeIterator = createIteratorConstructor(function RangeIterator(start, end, option, type, zero, one) {\n  if (typeof start != type || end !== Infinity && end !== -Infinity && typeof end != type) {\n    throw new TypeError(INCORRECT_RANGE);\n  }\n\n  if (start === Infinity || start === -Infinity) {\n    throw new RangeError(INCORRECT_RANGE);\n  }\n\n  var ifIncrease = end > start;\n  var inclusiveEnd = false;\n  var step;\n\n  if (option === undefined) {\n    step = undefined;\n  } else if (isObject(option)) {\n    step = option.step;\n    inclusiveEnd = !!option.inclusive;\n  } else if (typeof option == type) {\n    step = option;\n  } else {\n    throw new TypeError(INCORRECT_RANGE);\n  }\n\n  if (step == null) {\n    step = ifIncrease ? one : -one;\n  }\n\n  if (typeof step != type) {\n    throw new TypeError(INCORRECT_RANGE);\n  }\n\n  if (step === Infinity || step === -Infinity || step === zero && start !== end) {\n    throw new RangeError(INCORRECT_RANGE);\n  } // eslint-disable-next-line no-self-compare\n\n\n  var hitsEnd = start != start || end != end || step != step || end > start !== step > zero;\n  setInternalState(this, {\n    type: RANGE_ITERATOR,\n    start: start,\n    end: end,\n    step: step,\n    inclusiveEnd: inclusiveEnd,\n    hitsEnd: hitsEnd,\n    currentCount: zero,\n    zero: zero\n  });\n\n  if (!DESCRIPTORS) {\n    this.start = start;\n    this.end = end;\n    this.step = step;\n    this.inclusive = inclusiveEnd;\n  }\n}, RANGE_ITERATOR, function next() {\n  var state = getInternalState(this);\n  if (state.hitsEnd) return {\n    value: undefined,\n    done: true\n  };\n  var start = state.start;\n  var end = state.end;\n  var step = state.step;\n  var currentYieldingValue = start + step * state.currentCount++;\n  if (currentYieldingValue === end) state.hitsEnd = true;\n  var inclusiveEnd = state.inclusiveEnd;\n  var endCondition;\n\n  if (end > start) {\n    endCondition = inclusiveEnd ? currentYieldingValue > end : currentYieldingValue >= end;\n  } else {\n    endCondition = inclusiveEnd ? end > currentYieldingValue : end >= currentYieldingValue;\n  }\n\n  if (endCondition) {\n    return {\n      value: undefined,\n      done: state.hitsEnd = true\n    };\n  }\n\n  return {\n    value: currentYieldingValue,\n    done: false\n  };\n});\n\nvar getter = function getter(fn) {\n  return {\n    get: fn,\n    set: function set() {\n      /* empty */\n    },\n    configurable: true,\n    enumerable: false\n  };\n};\n\nif (DESCRIPTORS) {\n  defineProperties($RangeIterator.prototype, {\n    start: getter(function () {\n      return getInternalState(this).start;\n    }),\n    end: getter(function () {\n      return getInternalState(this).end;\n    }),\n    inclusive: getter(function () {\n      return getInternalState(this).inclusiveEnd;\n    }),\n    step: getter(function () {\n      return getInternalState(this).step;\n    })\n  });\n}\n\nmodule.exports = $RangeIterator;","map":null,"metadata":{},"sourceType":"script"}