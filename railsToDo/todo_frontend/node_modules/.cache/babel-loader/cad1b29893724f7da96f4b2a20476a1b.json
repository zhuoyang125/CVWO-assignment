{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-iterator-helpers\n\nvar aFunction = require('../internals/a-function');\n\nvar anObject = require('../internals/an-object');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar Promise = getBuiltIn('Promise');\nvar push = [].push;\n\nvar createMethod = function createMethod(TYPE) {\n  var IS_TO_ARRAY = TYPE == 0;\n  var IS_FOR_EACH = TYPE == 1;\n  var IS_EVERY = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  return function (iterator, fn) {\n    anObject(iterator);\n    var next = aFunction(iterator.next);\n    var array = IS_TO_ARRAY ? [] : undefined;\n    if (!IS_TO_ARRAY) aFunction(fn);\n    return new Promise(function (resolve, reject) {\n      var closeIteration = function closeIteration(method, argument) {\n        try {\n          var returnMethod = iterator['return'];\n\n          if (returnMethod !== undefined) {\n            return Promise.resolve(returnMethod.call(iterator)).then(function () {\n              method(argument);\n            }, function (error) {\n              reject(error);\n            });\n          }\n        } catch (error2) {\n          return reject(error2);\n        }\n\n        method(argument);\n      };\n\n      var onError = function onError(error) {\n        closeIteration(reject, error);\n      };\n\n      var loop = function loop() {\n        try {\n          Promise.resolve(anObject(next.call(iterator))).then(function (step) {\n            try {\n              if (anObject(step).done) {\n                resolve(IS_TO_ARRAY ? array : IS_SOME ? false : IS_EVERY || undefined);\n              } else {\n                var value = step.value;\n\n                if (IS_TO_ARRAY) {\n                  push.call(array, value);\n                  loop();\n                } else {\n                  Promise.resolve(fn(value)).then(function (result) {\n                    if (IS_FOR_EACH) {\n                      loop();\n                    } else if (IS_EVERY) {\n                      result ? loop() : closeIteration(resolve, false);\n                    } else {\n                      result ? closeIteration(resolve, IS_SOME || value) : loop();\n                    }\n                  }, onError);\n                }\n              }\n            } catch (error) {\n              onError(error);\n            }\n          }, onError);\n        } catch (error2) {\n          onError(error2);\n        }\n      };\n\n      loop();\n    });\n  };\n};\n\nmodule.exports = {\n  toArray: createMethod(0),\n  forEach: createMethod(1),\n  every: createMethod(2),\n  some: createMethod(3),\n  find: createMethod(4)\n};","map":null,"metadata":{},"sourceType":"script"}