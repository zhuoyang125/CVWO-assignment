{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\zhuoy\\\\Documents\\\\basic-web-dev\\\\CVWO-assignment\\\\railsToDo\\\\todo_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\zhuoy\\\\Documents\\\\basic-web-dev\\\\CVWO-assignment\\\\railsToDo\\\\todo_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\zhuoy\\\\Documents\\\\basic-web-dev\\\\CVWO-assignment\\\\railsToDo\\\\todo_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\zhuoy\\\\Documents\\\\basic-web-dev\\\\CVWO-assignment\\\\railsToDo\\\\todo_frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\zhuoy\\\\Documents\\\\basic-web-dev\\\\CVWO-assignment\\\\railsToDo\\\\todo_frontend\\\\src\\\\components\\\\App.jsx\";\nimport React, { useEffect, useState } from \"react\";\n\nfunction App() {\n  var blank_toDo = {\n    task: \"\",\n    due_date: \"\",\n    completed: false\n  };\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      toDos = _useState2[0],\n      setToDos = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      input = _useState4[0],\n      setInput = _useState4[1]; //changes based on input\n\n\n  var _useState5 = useState(blank_toDo),\n      _useState6 = _slicedToArray(_useState5, 2),\n      newToDo = _useState6[0],\n      setNewToDo = _useState6[1]; //object created when user clicks submit\n\n\n  var getToDos = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, current_data;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"http://localhost:3000/todos\");\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              current_data = _context.sent;\n              setToDos(current_data);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getToDos() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  function listToDo(toDoItem) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }\n    }, toDoItem.task), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }\n    }, toDoItem.due_date), toDoItem.completed ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 39\n      }\n    }, \"Completed\") : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 58\n      }\n    }, \"Not Done\"));\n  }\n\n  function handleChange(event) {\n    setInput(event.target.value);\n  }\n\n  function handleSubmit(event) {\n    //when user submits new entry\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setNewToDo(function (prevValue) {\n      return _objectSpread(_objectSpread({}, prevValue), {}, {\n        [name]: value\n      });\n    });\n  }\n\n  var handleCreate = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(event) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              //post new toDo object\n              event.preventDefault();\n              _context2.next = 3;\n              return fetch(\"http://localhost:3000/todos\", {\n                method: \"post\",\n                headers: {\n                  \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(newToDo)\n              });\n\n            case 3:\n              response = _context2.sent;\n              _context2.next = 6;\n              return getToDos();\n\n            case 6:\n              setNewToDo(blank_toDo); //reset toDo to blank\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleCreate(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    //get toDos when the page loads\n    getToDos();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"Tasks to Do\"), toDos.length > 0 ? toDos.map(listToDo) : /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 55\n    }\n  }, \"No Tasks\"));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/zhuoy/Documents/basic-web-dev/CVWO-assignment/railsToDo/todo_frontend/src/components/App.jsx"],"names":["React","useEffect","useState","App","blank_toDo","task","due_date","completed","toDos","setToDos","input","setInput","newToDo","setNewToDo","getToDos","fetch","response","json","current_data","listToDo","toDoItem","handleChange","event","target","value","handleSubmit","name","prevValue","handleCreate","preventDefault","method","headers","body","JSON","stringify","length","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nfunction App(){\r\n    const blank_toDo = {task: \"\", due_date: \"\", completed: false};\r\n    const [toDos, setToDos] = useState([]);\r\n    const [input, setInput] = useState(\"\"); //changes based on input\r\n    const [newToDo, setNewToDo] = useState(blank_toDo); //object created when user clicks submit\r\n\r\n    const getToDos = async () => {\r\n        const response = await fetch(\"http://localhost:3000/todos\");\r\n        const current_data = await response.json();\r\n        setToDos(current_data);\r\n    }\r\n\r\n    function listToDo(toDoItem){\r\n        return(\r\n            <div>\r\n                <h3>{toDoItem.task}</h3>\r\n                <p>{toDoItem.due_date}</p>\r\n                {toDoItem.completed ? <p>Completed</p> : <p>Not Done</p> }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function handleChange(event){\r\n        setInput(event.target.value);\r\n    }\r\n\r\n    function handleSubmit(event){ //when user submits new entry\r\n        const { name, value } = event.target;\r\n\r\n        setNewToDo(prevValue => {\r\n            return {\r\n                ...prevValue,\r\n                [name]: value\r\n            }\r\n        });\r\n    }\r\n\r\n    const handleCreate = async event => { //post new toDo object\r\n        event.preventDefault();\r\n        \r\n        const response = await fetch(\"http://localhost:3000/todos\", {\r\n            method: \"post\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify(newToDo),\r\n        });\r\n\r\n        await getToDos();\r\n\r\n        setNewToDo(blank_toDo); //reset toDo to blank\r\n    } \r\n\r\n    useEffect(() => { //get toDos when the page loads\r\n        getToDos()\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>Tasks to Do</h1>\r\n            {toDos.length > 0 ? toDos.map(listToDo) : <h2>No Tasks</h2>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}