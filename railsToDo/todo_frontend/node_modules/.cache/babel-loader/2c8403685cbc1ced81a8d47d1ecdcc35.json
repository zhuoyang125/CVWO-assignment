{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-iterator-helpers\n\nvar $ = require('../internals/export');\n\nvar aFunction = require('../internals/a-function');\n\nvar anObject = require('../internals/an-object');\n\nvar createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');\n\nvar getAsyncIteratorMethod = require('../internals/get-async-iterator-method');\n\nvar AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {\n  var state = this;\n  var mapper = state.mapper;\n  var innerIterator, iteratorMethod;\n  return new Promise(function (resolve, reject) {\n    var outerLoop = function outerLoop() {\n      try {\n        Promise.resolve(anObject(state.next.call(state.iterator, arg))).then(function (step) {\n          try {\n            if (anObject(step).done) {\n              state.done = true;\n              resolve({\n                done: true,\n                value: undefined\n              });\n            } else {\n              Promise.resolve(mapper(step.value)).then(function (mapped) {\n                try {\n                  iteratorMethod = getAsyncIteratorMethod(mapped);\n\n                  if (iteratorMethod !== undefined) {\n                    state.innerIterator = innerIterator = anObject(iteratorMethod.call(mapped));\n                    state.innerNext = aFunction(innerIterator.next);\n                    return innerLoop();\n                  }\n\n                  reject(TypeError('.flatMap callback should return an iterable object'));\n                } catch (error2) {\n                  reject(error2);\n                }\n              }, reject);\n            }\n          } catch (error1) {\n            reject(error1);\n          }\n        }, reject);\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    var innerLoop = function innerLoop() {\n      if (innerIterator = state.innerIterator) {\n        try {\n          Promise.resolve(anObject(state.innerNext.call(innerIterator))).then(function (result) {\n            try {\n              if (anObject(result).done) {\n                state.innerIterator = state.innerNext = null;\n                outerLoop();\n              } else resolve({\n                done: false,\n                value: result.value\n              });\n            } catch (error1) {\n              reject(error1);\n            }\n          }, reject);\n        } catch (error) {\n          reject(error);\n        }\n      } else outerLoop();\n    };\n\n    innerLoop();\n  });\n});\n$({\n  target: 'AsyncIterator',\n  proto: true,\n  real: true\n}, {\n  flatMap: function flatMap(mapper) {\n    return new AsyncIteratorProxy({\n      iterator: anObject(this),\n      mapper: aFunction(mapper),\n      innerIterator: null,\n      innerNext: null\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}