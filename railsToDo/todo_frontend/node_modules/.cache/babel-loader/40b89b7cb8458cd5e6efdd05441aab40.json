{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-iterator-helpers\n\nvar $ = require('../internals/export');\n\nvar anObject = require('../internals/an-object');\n\nvar toPositiveInteger = require('../internals/to-positive-integer');\n\nvar createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');\n\nvar AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {\n  var state = this;\n  return new Promise(function (resolve, reject) {\n    var loop = function loop() {\n      try {\n        Promise.resolve(anObject(state.next.call(state.iterator, state.remaining ? undefined : arg))).then(function (step) {\n          try {\n            if (anObject(step).done) {\n              state.done = true;\n              resolve({\n                done: true,\n                value: undefined\n              });\n            } else if (state.remaining) {\n              state.remaining--;\n              loop();\n            } else resolve({\n              done: false,\n              value: step.value\n            });\n          } catch (err) {\n            reject(err);\n          }\n        }, reject);\n      } catch (error) {\n        reject(error);\n      }\n    };\n\n    loop();\n  });\n});\n$({\n  target: 'AsyncIterator',\n  proto: true,\n  real: true\n}, {\n  drop: function drop(limit) {\n    return new AsyncIteratorProxy({\n      iterator: anObject(this),\n      remaining: toPositiveInteger(limit)\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}