{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-iterator-helpers\n\nvar $ = require('../internals/export');\n\nvar anObject = require('../internals/an-object');\n\nvar toPositiveInteger = require('../internals/to-positive-integer');\n\nvar createAsyncIteratorProxy = require('../internals/async-iterator-create-proxy');\n\nvar AsyncIteratorProxy = createAsyncIteratorProxy(function (arg, Promise) {\n  var iterator = this.iterator;\n  var returnMethod, result;\n\n  if (!this.remaining--) {\n    result = {\n      done: true,\n      value: undefined\n    };\n    this.done = true;\n    returnMethod = iterator['return'];\n\n    if (returnMethod !== undefined) {\n      return Promise.resolve(returnMethod.call(iterator)).then(function () {\n        return result;\n      });\n    }\n\n    return result;\n  }\n\n  return this.next.call(iterator, arg);\n});\n$({\n  target: 'AsyncIterator',\n  proto: true,\n  real: true\n}, {\n  take: function take(limit) {\n    return new AsyncIteratorProxy({\n      iterator: anObject(this),\n      remaining: toPositiveInteger(limit)\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}