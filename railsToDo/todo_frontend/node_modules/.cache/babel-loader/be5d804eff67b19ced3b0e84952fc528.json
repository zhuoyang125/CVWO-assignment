{"ast":null,"code":"'use strict'; // https://github.com/tc39/proposal-iterator-helpers\n\nvar $ = require('../internals/export');\n\nvar aFunction = require('../internals/a-function');\n\nvar anObject = require('../internals/an-object');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar Promise = getBuiltIn('Promise');\n$({\n  target: 'AsyncIterator',\n  proto: true,\n  real: true\n}, {\n  reduce: function reduce(reducer\n  /* , initialValue */\n  ) {\n    var iterator = anObject(this);\n    var next = aFunction(iterator.next);\n    var noInitial = arguments.length < 2;\n    var accumulator = noInitial ? undefined : arguments[1];\n    aFunction(reducer);\n    return new Promise(function (resolve, reject) {\n      var loop = function loop() {\n        try {\n          Promise.resolve(anObject(next.call(iterator))).then(function (step) {\n            try {\n              if (anObject(step).done) {\n                noInitial ? reject(TypeError('Reduce of empty iterator with no initial value')) : resolve(accumulator);\n              } else {\n                var value = step.value;\n\n                if (noInitial) {\n                  noInitial = false;\n                  accumulator = value;\n                  loop();\n                } else {\n                  Promise.resolve(reducer(accumulator, value)).then(function (result) {\n                    accumulator = result;\n                    loop();\n                  }, reject);\n                }\n              }\n            } catch (err) {\n              reject(err);\n            }\n          }, reject);\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      loop();\n    });\n  }\n});","map":null,"metadata":{},"sourceType":"script"}